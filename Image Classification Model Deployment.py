# -*- coding: utf-8 -*-
"""Proyek Akhir Fix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pe3aY0lsGjGrlFQ-gJKx99l0W10QIBnK
"""

!pip install -q kaggle

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

!kaggle datasets download -d madisona/translated-animals10

# direktori baru
!mkdir datapict
!unzip -qq translated-animals10.zip -d datapict
!ls datapict

!sudo apt install tree

# melihat susunan direktori
!tree -d datapict/

# hapus direktori
import shutil

shutil.rmtree('datapict/animals10/raw-img/cat')
shutil.rmtree('datapict/animals10/raw-img/cow')
shutil.rmtree('datapict/animals10/raw-img/dog')
shutil.rmtree('datapict/animals10/raw-img/elephant')
shutil.rmtree('datapict/animals10/raw-img/butterfly')
shutil.rmtree('datapict/animals10/raw-img/sheep')
shutil.rmtree('datapict/animals10/raw-img/squirrel')

!tree -d datapict/

!pip install split_folders tqdm

import splitfolders

splitfolders.ratio('datapict/animals10/raw-img/', output = 'datapict/animals10/raw-img/data_model', seed = 3, ratio = (0.8, 0.2))

import os

base_dir = 'datapict/animals10/raw-img/data_model'
train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'val')

train_chicken_dir = os.path.join(train_dir, 'chicken')
train_horse_dir = os.path.join(train_dir, 'horse')
train_spider_dir = os.path.join(train_dir, 'spider')

validation_chicken_dir = os.path.join(validation_dir, 'chicken')
validation_horse_dir = os.path.join(validation_dir, 'horse')
validation_spider_dir = os.path.join(validation_dir, 'spider')

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import random

chicken_files = os.listdir(train_chicken_dir)
horse_files = os.listdir(train_horse_dir)
spider_files = os.listdir(train_spider_dir)

pic_index = random.randrange(0, 1000)

next_chicken = [os.path.join(train_chicken_dir, fname) 
                for fname in chicken_files[pic_index-2:pic_index]]
next_horse = [os.path.join(train_horse_dir, fname) 
                for fname in horse_files[pic_index-2:pic_index]]
next_spider = [os.path.join(train_spider_dir, fname) 
                for fname in spider_files[pic_index-2:pic_index]]

for i, img_path in enumerate(next_chicken + next_horse + next_spider):
  img = mpimg.imread(img_path)
  plt.imshow(img)
  plt.axis('Off')
  plt.show()

import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   rotation_range = 40,
                                   width_shift_range = 0.2,
                                   height_shift_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True,
                                   shear_range = 0.2,
                                   fill_mode = 'nearest')
 
test_datagen = ImageDataGenerator(rescale = 1./255,
                                  rotation_range = 40,
                                  width_shift_range = 0.2,
                                  height_shift_range = 0.2,
                                  zoom_range = 0.2,
                                  horizontal_flip = True,
                                  shear_range = 0.2,
                                  fill_mode = 'nearest')

train_generator = train_datagen.flow_from_directory(
    train_dir,  # direktori data latih
    target_size = (150, 150),  # mengubah resolusi seluruh gambar menjadi 150x150 piksel
    batch_size = 20,
    class_mode = 'categorical')
 
validation_generator = test_datagen.flow_from_directory(
    validation_dir, # direktori data validasi
    target_size = (150, 150), # mengubah resolusi seluruh gambar menjadi 150x150 piksel
    batch_size = 20, 
    class_mode = 'categorical')

tf.device('/device:GPU:0')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(64, (3,3), activation = 'relu', input_shape = (150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation = 'relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation = 'relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation = 'relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5), 
    tf.keras.layers.Dense(512, activation = 'relu'),
    tf.keras.layers.Dense(3, activation = 'softmax')
])

model.compile(optimizer = 'adam',
              loss = 'categorical_crossentropy',
              metrics = ['accuracy']
              )

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs = {}):
    if(logs.get('accuracy') > 0.85 and logs.get('val_accuracy') > 0.85):
      print("\nAkurasi diatas 85%, training selesai!")
      self.model.stop_training = True

callbacks = myCallback()

history = model.fit(train_generator, 
                    epochs = 100, 
                    steps_per_epoch = 32,
                    validation_data = validation_generator, 
                    validation_steps = 8,
                    verbose = 1,
                    callbacks = [callbacks])

import numpy as np
import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc = 'upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc = 'upper left')
plt.show()

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)

!ls -la | grep 'model'